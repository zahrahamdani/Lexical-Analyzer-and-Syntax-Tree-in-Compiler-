# -*- coding: utf-8 -*-
"""200901047_Assign_02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aIZO0X7lVKa9Jlt5A7HsEcAWUph6_d4j
"""

import re                                      #for performing regex expression
tokens=[]                                      #for string tokens
source_code=' int sum = 100 + b + c'.split()   #turning source code into list of words
word=[]
for word in source_code:
  if word in ['str','int','bool']:             #checks datatype declaration
    tokens.append(['DATATYPE' , word])

  elif re.match('[a-z]',word) or  re.match('[A-Z]',word):  #check for identifier
    tokens.append(['IDENTIFIER', word])
  
  elif word in '*-/+%=':                                    #checks for operator
    tokens.append(['OPERATOR', word])                        
  
  elif re.match("[0-9]",word):                              #checks for integer
    if word[len(word) - 1] == ';':
      tokens.append(['INTEGER', word[:-1]]) 
      tokens.append(['END STATEMENT', ';'])                 #checks for end identifier
    else:
      tokens.append(['INTEGER', word])                     
print(tokens)

import ast                  #abstract syntax tree library 
exp = "result = b + c"      #expression
tree = ast.parse(exp)       #forming tree
ast.dump(tree)              #dump is used when the objects are required to be in string format and is used for parsing or  printing